buildscript {
    repositories {
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.3'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.10.1-SNAPSHOT'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'spoon'

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 15
        targetSdkVersion 20
        versionCode 1
        versionName "1.0"
        testApplicationId TEST_PACKAGE_NAME
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName PACKAGE_NAME
    }
}


spoon {
    debug = true

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }
}

ext.androidAnnotationsVersion = '3.1-SNAPSHOT';
ext.autoValueVersion = '0.2';

dependencies {
    compile 'com.google.guava:guava-base:r03'

    compile 'com.github.manuelpeinado.multichoiceadapter:multichoiceadapter:3.1.0'

    compile("org.androidannotations:androidannotations-api:${androidAnnotationsVersion}")
    apt "org.androidannotations:androidannotations:${androidAnnotationsVersion}"

    provided 'com.google.code.findbugs:jsr305:3.0.0'
    compile "com.github.frankiesardo:auto-parcel:${autoValueVersion}"
    apt 'com.google.code.findbugs:jsr305:3.0.0'
    apt "com.github.frankiesardo:auto-parcel-processor:${autoValueVersion}"

    androidTestCompile('com.jakewharton.espresso:espresso:1.1-r3')
    androidTestCompile('com.squareup.spoon:spoon-client:1.1.0')
}

// Override Data in Manifest - This can be done using different Manifest files for each flavor, this way there's no need to modify the manifest
android.applicationVariants.all { variant ->
    if (variant.name.contains('debug')) { // Where dev is the one you'll use to run Espresso tests
        System.out.println("Not removing the SET_ANIMATION_SCALE permission for $variant.name")
        return
    }

    System.out.println("Removing the SET_ANIMATION_SCALE permission for $variant.name")
    variant.processManifest.doLast {
        copyAndReplaceText(manifestOutputFile, manifestOutputFile) {
            def replaced = it.replace('<uses-permission android:name="android.permission.SET_ANIMATION_SCALE"/>', '');
            if (replaced.contains('SET_ANIMATION_SCALE')) {
                // For security, imagine an extra space is added before closing tag, then the replace would fail - TODO use regex
                throw new RuntimeException("Don't ship with this permission! android.permission.SET_ANIMATION_SCALE")
            }
            replaced
        }
    }
}
